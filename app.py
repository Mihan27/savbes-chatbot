from flask import Flask, request, jsonify, render_template, send_from_directory
from flask_cors import CORS
import logging
import traceback
import os
import random
import string
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s: %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)

app = Flask(__name__)

# ‚úÖ CORS –ø–æ–¥–¥–µ—Ä–∂–∫–∞
CORS(app, origins=["https://www.savbes.ru", "https://savbes.ru", "http://localhost:3000"])

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
chat_states = {}
chat_history = {}
DIALOG_HISTORY = chat_history  # –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å base_calculator.py

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
try:
    from calculator import calculator_dispatcher
    logging.info("Calculator dispatcher —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ calculator_dispatcher: {str(e)}")
    calculator_dispatcher = None

try:
    from api import yandex_gpt
    logging.info("Yandex GPT API —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ yandex_gpt: {str(e)}")
    yandex_gpt = None

try:
    from utils import email_sender
    logging.info("Email sender —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ email_sender: {str(e)}")
    email_sender = None


def save_message_to_context(session_id, message, is_user=True):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        global chat_history, chat_states

        if chat_history is None:
            chat_history = {}
        if chat_states is None:
            chat_states = {}

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if session_id not in chat_history:
            chat_history[session_id] = []
            logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è
        message_record = {
            'text': str(message),  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            'is_user': bool(is_user),
            'timestamp': datetime.now().isoformat()
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history[session_id].append(message_record)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π)
        if len(chat_history[session_id]) > 50:
            chat_history[session_id] = chat_history[session_id][-50:]
            logging.info(f"–û–±—Ä–µ–∑–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id} –¥–æ 50 —Å–æ–æ–±—â–µ–Ω–∏–π")

        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")
        return True

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {str(e)}")
        logging.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return False


def load_system_prompt():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
    """
    try:
        with open('system_prompt.txt', 'r', encoding='utf-8') as file:
            prompt = file.read()
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª–∏–Ω–æ–π {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
            return prompt
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {str(e)}")
        return None


def detect_calculation_intent(message):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä–∞—Å—á–µ—Ç —É—Å–ª—É–≥
    """
    message_lower = message.lower()
    
    # ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø - –ù–ï —Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—á–µ—Ç–æ–º
    exclusion_phrases = [
        '–∫–∞–∫–∏–µ –µ—Å—Ç—å —É—Å–ª—É–≥–∏', '—á—Ç–æ –∑–∞ —É—Å–ª—É–≥–∏', '–∫–∞–∫–∏–µ —É—Å–ª—É–≥–∏', '–ø–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥',
        '—Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥', '–≤–∏–¥—ã —É—Å–ª—É–≥', '–≤–∞—à–∏ —É—Å–ª—É–≥–∏', '—É—Å–ª—É–≥–∏ –∫–æ–º–ø–∞–Ω–∏–∏',
        '–∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã', '—á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ', '—á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å'
    ]
    
    for exclusion in exclusion_phrases:
        if exclusion in message_lower:
            logging.info(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: –ù–ï —Ä–∞—Å—á–µ—Ç –ø–æ —Ñ—Ä–∞–∑–µ: {exclusion}")
            return False
    
    # ‚úÖ –¢–û–ß–ù–´–ï —Ñ—Ä–∞–∑—ã —Ä–∞—Å—á–µ—Ç–∞ (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    calculation_phrases = [
        '—Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏', '—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', 
        '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '—Ü–µ–Ω–∞ –∑–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç', '–≤–æ —Å–∫–æ–ª—å–∫–æ –æ–±–æ–π–¥–µ—Ç—Å—è',
        '–ø–æ—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ö–æ—á—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å', '–Ω—É–∂–µ–Ω —Ä–∞—Å—á–µ—Ç'
    ]
    
    for phrase in calculation_phrases:
        if phrase in message_lower:
            logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Ç–µ–Ω—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–æ —Ç–æ—á–Ω–æ–π —Ñ—Ä–∞–∑–µ: {phrase}")
            return True
    
    # ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    multi_service_phrases = [
        '–Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª—É–≥', '–∫–æ–º–ø–ª–µ–∫—Å —É—Å–ª—É–≥', '—Ä–∞–∑–Ω—ã–µ —É—Å–ª—É–≥–∏',
        '–º–Ω–æ–≥–æ —É—Å–ª—É–≥', '–≤—Å–µ —É—Å–ª—É–≥–∏', '–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π',
        '–º–Ω–µ –Ω–∞–¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ', '–Ω—É–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ', '—Ö–æ—á—É –Ω–µ—Å–∫–æ–ª—å–∫–æ'
    ]

    for phrase in multi_service_phrases:
        if phrase in message_lower:
            logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Ç–µ–Ω—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ —Ñ—Ä–∞–∑–µ: {phrase}")
            return True

    # ‚úÖ –ö–û–ù–ö–†–ï–¢–ù–´–ï –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç)
    specific_needs = [
        '–Ω—É–∂–Ω—ã —Ä–æ–∑–µ—Ç–∫–∏', '–Ω—É–∂–Ω–æ –æ—Å–≤–µ—â–µ–Ω–∏–µ', '–Ω—É–∂–µ–Ω —â–∏—Ç', '–Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–æ–¥–∫–∞',
        '—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–∑–µ—Ç–∫–∏', '–ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–∏', '–ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–∏',
        '–º–æ–Ω—Ç–∞–∂ —Ä–æ–∑–µ—Ç–æ–∫', '–º–æ–Ω—Ç–∞–∂ –æ—Å–≤–µ—â–µ–Ω–∏—è', '–º–æ–Ω—Ç–∞–∂ —â–∏—Ç–∞',
        '–ø—Ä–æ–ª–æ–∂–∏—Ç—å –∫–∞–±–µ–ª—å', '–ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–≤–æ–¥–∫—É'
    ]
    
    for need in specific_needs:
        if need in message_lower:
            logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Ç–µ–Ω—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏: {need}")
            return True

    return False


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/static/<path:filename>')
def static_files(filename):
    return send_from_directory('static', filename)


@app.route('/api/chat', methods=['POST', 'OPTIONS'])
def chat():
    # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
    if request.method == 'OPTIONS':
        response = jsonify({'status': 'ok'})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
        response.headers.add('Access-Control-Allow-Methods', 'POST, OPTIONS')
        return response

    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ'}), 400

        message = data.get('message', '').strip()
        session_id = data.get('session_id', '')

        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400

        if not session_id:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π session_id –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            session_id = ''.join(random.choices(string.ascii_lowercase + string.digits, k=12))
            logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π session_id: {session_id}")

        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç —Å–µ—Å—Å–∏–∏ {session_id}: {message}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not save_message_to_context(session_id, message, is_user=True):
            logging.warning(f"Could not save message to context for session {session_id}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º chat_states –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        global chat_states
        if chat_states is None:
            chat_states = {}

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º
        if session_id in chat_states:
            logging.info(f"–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            calculator_type = chat_states[session_id].get("calculator_type", "socket")
            
            # üéØ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º dispatcher –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
            try:
                response = calculator_dispatcher.CalculatorDispatcher.process_calculation(
                    calculator_type, message, session_id, chat_states
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞: {str(e)}")
                logging.error(f"Traceback: {traceback.format_exc()}")
                response = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ."
                chat_states.pop(session_id, None)

        else:
            # –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Ç
            if detect_calculation_intent(message):
                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –∏–Ω—Ç–µ–Ω—Ç —Ä–∞—Å—á–µ—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

                if calculator_dispatcher:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π dispatcher –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
                        calculator_type, use_multi, extracted_params = calculator_dispatcher.CalculatorDispatcher.detect_calculator_details(message)

                        # üéØ –ü–†–ê–í–ò–õ–¨–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —á–µ—Ä–µ–∑ dispatcher
                        response = calculator_dispatcher.CalculatorDispatcher.start_calculation(
                            calculator_type, session_id, chat_states, extracted_params
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –≤ calculator_dispatcher: {str(e)}")
                        logging.error(f"Traceback: {traceback.format_exc()}")
                        response = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    response = "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            else:
                # –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º Yandex GPT
                logging.info(f"–û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

                if yandex_gpt:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ API
                        chat_history_for_api = chat_history.get(session_id, [])

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                        system_prompt = load_system_prompt()

                        # –í—ã–∑—ã–≤–∞–µ–º Yandex GPT API
                        api_response = yandex_gpt.call_yandex_gpt(
                            message,
                            session_id,
                            system_prompt=system_prompt,
                            chat_history=chat_history_for_api
                        )

                        # ‚úÖ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
                        if isinstance(api_response, dict):
                            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - —Å–ª–æ–≤–∞—Ä—å, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
                            response = api_response.get('text', api_response.get('response', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞'))
                            
                            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞
                            calculator_commands = {
                                '–ó–ê–ü–£–°–¢–ò–¢–¨_–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†_–†–û–ó–ï–¢–ö–ò': 'socket',
                                '–ó–ê–ü–£–°–¢–ò–¢–¨_–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†_–û–°–í–ï–©–ï–ù–ò–Ø': 'lighting',
                                '–ó–ê–ü–£–°–¢–ò–¢–¨_–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†_–©–ò–¢–û–í': 'panel',
                                '–ó–ê–ü–£–°–¢–ò–¢–¨_–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†_–ö–ê–ë–ï–õ–ï–ô': 'cabling',
                                '–ó–ê–ü–£–°–¢–ò–¢–¨_–ú–ù–û–ì–û–§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ô_–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†': 'multi'
                            }
                            
                            detected_calculator = None
                            for command, calc_type in calculator_commands.items():
                                if command in response:
                                    detected_calculator = calc_type
                                    # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ—Ç–≤–µ—Ç–∞
                                    response = response.replace(command, "").strip()
                                    logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞: {command} -> {calc_type}")
                                    break
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –≤ –æ—Ç–≤–µ—Ç–µ (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
                            calculator_type = api_response.get('calculator_type') or detected_calculator
                            
                            if calculator_type and calculator_dispatcher:
                                try:
                                    logging.info(f"–ó–∞–ø—É—Å–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ {calculator_type} –∏–∑ GPT –æ—Ç–≤–µ—Ç–∞")
                                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
                                    extracted_calculator_type, use_multi, extracted_params = calculator_dispatcher.CalculatorDispatcher.detect_calculator_details(message)
                                    calc_response = calculator_dispatcher.CalculatorDispatcher.start_calculation(
                                        calculator_type, session_id, chat_states, extracted_params
                                    )
                                    # –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–≤–µ—Ç –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
                                    response = calc_response
                                    logging.info(f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                                except Exception as e:
                                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∏–∑ GPT –æ—Ç–≤–µ—Ç–∞: {str(e)}")
                                    logging.error(f"Traceback: {traceback.format_exc()}")
                                    response = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                                    
                        elif isinstance(api_response, str):
                            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                            response = api_response
                        else:
                            # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –ø—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ
                            response = str(api_response)
                            logging.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex GPT: {type(api_response)}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ—Ç–≤–µ—Ç
                        if not response or len(response.strip()) == 0:
                            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Yandex GPT: {str(e)}")
                        logging.error(f"Traceback: {traceback.format_exc()}")
                        response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º."
                else:
                    response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        if not save_message_to_context(session_id, response, is_user=False):
            logging.warning(f"Could not save bot response to context for session {session_id}")

        return jsonify({
            'response': response,
            'session_id': session_id
        })

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        logging.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


@app.route('/api/contact', methods=['POST', 'OPTIONS'])
def contact():
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
    if request.method == 'OPTIONS':
        response = jsonify({'status': 'ok'})
        response.headers.add('Access-Control-Allow-Origin', '*')
        response.headers.add('Access-Control-Allow-Headers', 'Content-Type')
        response.headers.add('Access-Control-Allow-Methods', 'POST, OPTIONS')
        return response

    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ'}), 400

        phone = data.get('phone', '').strip()
        name = data.get('name', '').strip()
        email_addr = data.get('email', '').strip()
        session_id = data.get('session_id', '')

        if not phone:
            return jsonify({'error': '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

        logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {name}, {phone}, {email_addr}")

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞
        dialog_history = chat_history.get(session_id, [])
        calculation_results = None

        if session_id in chat_states:
            calculation_results = chat_states[session_id].get("full_calc")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ email –µ—Å–ª–∏ –µ—Å—Ç—å email_sender
        if email_sender:
            try:
                success = email_sender.send_client_request(
                    phone_number=phone,
                    dialog_history=dialog_history,
                    calculation_results=calculation_results,
                    name=name,
                    email=email_addr
                )

                if success:
                    logging.info(f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è {phone}")
                    return jsonify({'success': True, 'message': '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!'})
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –¥–ª—è {phone}")
                    return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏'})
            except Exception as e:
                logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}")
                return jsonify({'success': False, 'message': '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏'})
        else:
            logging.info(f"Email sender –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {phone}")
            return jsonify({'success': True, 'message': '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!'})

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        logging.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)